# Load necessary libraries
library(readr)    # For read_csv
library(dplyr)    # For data manipulation
library(tidyr)    # For data tidying
library(pheatmap) # For plotting heatmaps

# Path setup
F <- '/Users/jpmcginnis1/Desktop/Sequencing info and data/RStudio_work/1-29-24 TCH DEG CSVs'

# File processing
files <- list.files(path = F, pattern = '\\.csv$', full.names = TRUE)

# Separate files by "day 0" and "day 14"
day0_files <- files[grep(' day 0\\.csv$', files)]
day14_files <- files[grep(' day 14\\.csv$', files)]

# Extract cluster names by removing " day 0" and " day 14" suffixes
day0_clusters <- gsub(' day 0\\.csv$', '', basename(day0_files))
day14_clusters <- gsub(' day 14\\.csv$', '', basename(day14_files))

# Find matching clusters
matching_clusters <- intersect(day0_clusters, day14_clusters)

# Filter files to include only matching clusters
day0_files <- day0_files[day0_clusters %in% matching_clusters]
day14_files <- day14_files[day14_clusters %in% matching_clusters]

# Generate labels
day0_labels <- paste0(gsub(' day 0\\.csv$', '', basename(day0_files)), " (Day 0)")
day14_labels <- paste0(gsub(' day 14\\.csv$', '', basename(day14_files)), " (Day 14)")

# Initialize gene list
names <- unique(c())

# Read all FeatureID names from both Day 14 and Day 0 files
for (file in c(day14_files, day0_files)) {
    T <- read_csv(file, col_names = TRUE)
    gene_names <- T$FeatureID  # Use FeatureID for gene identifiers
    names <- unique(c(names, gene_names))
}

# Ensure matrices have correct dimensions
nDay14 <- length(day14_files)
nDay0 <- length(day0_files)
GL <- matrix(NA, nrow = length(names), ncol = nDay14 + nDay0) # Log2_Fold_Change matrix

# Load Day 14 files and extract Log2_Fold_Change
for (i in seq_along(day14_files)) {
    T <- read_csv(day14_files[i], col_names = TRUE)
    gene_names <- T$FeatureID  # Use FeatureID for matching
    log2_fc <- as.numeric(T$Log2_Fold_Change)  # Use Log2_Fold_Change for values
    
    idx <- match(gene_names, names)  # Match FeatureID to 'names'
    if (any(!is.na(idx))) {
        GL[idx, i] <- log2_fc[!is.na(idx)]  # Fill GL matrix
    }
}

# Load Day 0 files and extract Log2_Fold_Change
for (i in seq_along(day0_files)) {
    T <- read_csv(day0_files[i], col_names = TRUE)
    gene_names <- T$FeatureID  # Use FeatureID for matching
    log2_fc <- as.numeric(T$Log2_Fold_Change)  # Use Log2_Fold_Change for values
    
    idx <- match(gene_names, names)  # Match FeatureID to 'names'
    if (any(!is.na(idx))) {
        GL[idx, nDay14 + i] <- log2_fc[!is.na(idx)]  # Fill GL matrix
    }
}

# Calculate correlations based on Log2_Fold_Change values
CL <- matrix(NA, nrow = nDay14, ncol = nDay0) # Log2_Fold_Change correlation

for (i in 1:nDay14) {
    for (j in 1:nDay0) {
        a <- GL[, i]
        b <- GL[, nDay14 + j]
        rm <- is.na(a) | is.na(b)
        a <- a[!rm]
        b <- b[!rm]
        
        if (length(a) > 1 && length(b) > 1) {
            CL[i, j] <- cor(a, b, use = "complete.obs")
        } else {
            CL[i, j] <- NA  # Assign NA for insufficient data
        }
    }
}

# Convert row and column names
rownames(CL) <- day14_labels
colnames(CL) <- day0_labels

# Plot heatmap for Log2_Fold_Change correlations with larger font sizes
breaks_log2 <- seq(-1, 1, length.out = 100)
pheatmap(CL, cluster_rows = FALSE, cluster_cols = FALSE,
         labels_row = day14_labels, labels_col = day0_labels,
         display_numbers = TRUE, main = "Log2 Fold Change Correlation",
         breaks = breaks_log2, color = colorRampPalette(c("blue", "white", "red"))(100),
         fontsize_row = 12, fontsize_col = 12, fontsize_number = 10)  # Increased font sizes

# Write to CSV (Optional)
write.csv(CL, file.path(F, 'corr_Log2_Fold_Change_day14_vs_day0.csv'), row.names = TRUE)

